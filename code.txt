
MainPrgm L3_software ;
Var
< !- Test des commentaires sur une ligne -!>

{--
Test des commentaires 
sur plusieurs lignes
avec des - isoles
--}

< !- Test de declaration de variables -!>
let x, y, z ,lina: Int ;
let a, b : Float ;
let tab1, tab2 : [Int; 10] ;
let tab_float : [Float; 25] ;
let i : Int ; 
< !- Test des identifiants valides -!>
let valid_id, a123, ab_cd : Int ;

< !- Test des constantes -!>
@define Const Pi : Float = 3.14 ;
@define Const Max : Int = 100 ;
@define Const Min : Int = (-32768) ;
@define Const Positive : Int = (+100) ;

BeginPg
{
    < !- Test d'affectation -!>
    x := 10 ;
    y := (-5) ;
    z := (+15) ;
    a := 2.5 ;
    b := (-1.5) ;
    
    < !- Test des operateurs arithmetiques -!>
    x := y + z ;
    a := b * 3.0 ;
    z := x / y ;
    b := a - 1.0 ;
    
    < !- Test des opérateurs de comparaison -!>
    if (x > y) then {
        output("x est plus grand que y") ;
    } else {
        output("x n'est pas plus grand que y") ;
    }
    
    if (a <= b) then {
        output("a est inferieur ou egal à b") ;
    }
    
    if (x == 10) then {
        output("x est égal à 10") ;
    }
    
    if (y != 0) then {
        output("y n'est pas égal à 0") ;
    }
    
    < !- Test des operateurs logiques -!>  
   if ((x > 0 AND y > 0)) then {
        output("x et y sont positifs") ;
    }
    
    if ((x < 0 OR y < 0)) then {
        output("Au moins un parmi x et y est negatif") ;
    }

    if (!(x == 0)) then {
        output("x n'est pas egal à 0") ;
    }
    
    < !- Test des boucles -!>
    do {
        x := x - 1 ;
    } while (x > 0) ;
    
    for i from 1 to 10 step 2 {
        tab1[i] := i * i ;
    }
    
    < !- Test des entrées/sorties -!>
    output("Entrez une valeur pour x: ") ;
    input(x) ;
    
    < !- Test des expressions complexes -!>
    z := (x + y) * (a / b) + (-3) ;
    
    < !- Test des tableaux -!>
    tab1[0] := 100 ;
    tab2[5] := tab1[0] * 2 ;
    
    < !- Test des structures imbriquées -!>
    if (x > 0) then {
        do {
            x := x - 1 ;
            if (x == 5) then {
                output("x vaut 5") ;
            }
        } while (x >= 0) ;
    } else {
        for i from 0 to 5 step 1 {
            tab1[i] := 0 ;
        }
    }
}
EndPg ;


MainPrgm L3_software ;
Var
< !- Test des commentaires sur une ligne -!>

{--
Test des commentaires 
sur plusieurs lignes
avec des - isoles
--}

< !- Test de declaration de variables -!>
let x, y, z : Int ;
let a, b : Float ;
let tab1, tab2 : [Int; 10] ;
let tab_float : [Float; 25] ;

< !- Test des identifiants valides -!>
let valid_id, a123, ab_cd : Int ;

< !- Test des constantes - !>
@define Const PI : Float = 3.14 ;
@define Const MAX : Int = 100 ;
@define Const MIN : Int = (-32768) ;
@define Const POSITIVE : Int = (+100) ;

BeginPg
{
    < !- Test d'affectation -!>
    x := 10 ;
    y := (-5) ;
    z := (+15) ;
    a := 2.5 ;
    b := (-1.5) ;
    
    < !- Test des operateurs arithmetiques -!>
    x := y + z ;
    a := b * 3.0 ;
    z := x / y ;
    b := a - 1.0 ;
    
    < !- Test des opérateurs de comparaison -!>
    if (x > y) then {
        output("x est plus grand que y") ;
    } else {
        output("x n'est pas plus grand que y") ;
    }
    
    if (a <= b) then {
        output("a est inferieur ou egal à b") ;
    }
    
    if (x == 10) then {
        output("x est égal à 10") ;
    }
    
    if (y != 0) then {
        output("y n'est pas égal à 0") ;
    }
    
    < !- Test des operateurs logiques -!>
    if ((x > 0) AND (y > 0)) then {
        output("x et y sont positifs") ;
    }
    
    if ((x < 0) OR (y < 0)) then {
        output("Au moins un parmi x et y est negatif") ;
    }
    
    if (!(x == 0)) then {
        output("x n'est pas egal à 0") ;
    }
    
    < !- Test des boucles -!>
    do {
        x := x - 1 ;
    } while (x > 0) ;
    
    for i from 1 to 10 step 2 {
        tab1[i] := i * i ;
    }
    
    < !- Test des entrées/sorties -!>
    output("Entrez une valeur pour x: ") ;
    input(x) ;
    
    < !- Test des expressions complexes -!>
    z := (x + y) * (a / b) + (-3) ;
    
    < !- Test des tableaux - !>
    tab1[0] := 100 ;
    tab2[5] := tab1[0] * 2 ;
    
    < !- Test des structures imbriquées -!>
    if (x > 0) then {
        do {
            x := x - 1 ;
            if (x == 5) then {
                output("x vaut 5") ;
            }
        } while (x > 0) ;
    } else {
        for i from 0 to 5 step 1 {
            tab1[i] := 0 ;
        }
    }
}
EndPg ;

