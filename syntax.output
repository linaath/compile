Grammar

    0 $accept: programme $end

    1 programme: MAINPRGM IDF SEMICOLON bloc

    2 bloc: VAR declarations BEGINPG LBRACE instructions RBRACE ENDPG SEMICOLON

    3 declarations: declarations declaration
    4             | declarations commentaire
    5             | /* empty */

    6 declaration: LET liste_idf COLON type SEMICOLON
    7            | LET liste_idf COLON LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON
    8            | DEFINE CONST IDF COLON type EQUALS valeur SEMICOLON

    9 liste_idf: liste_idf COMMA IDF
   10          | IDF

   11 type: INT_TYPE
   12     | FLOAT_TYPE

   13 valeur: INT_VAL
   14       | FLOAT_VAL

   15 instructions: instructions instruction
   16             | /* empty */

   17 instruction: affectation
   18            | condition
   19            | boucle
   20            | io_instruction
   21            | commentaire
   22            | instruction_if
   23            | SEMICOLON

   24 affectation: idf_use ASSIGN expression SEMICOLON
   25            | idf_use LBRACKET expression RBRACKET ASSIGN expression SEMICOLON

   26 idf_use: IDF

   27 expression: expression PLUS expression
   28           | expression MINUS expression
   29           | expression MULT expression
   30           | expression DIV expression
   31           | LPAREN expression RPAREN
   32           | idf_use
   33           | idf_use LBRACKET expression RBRACKET
   34           | INT_VAL
   35           | FLOAT_VAL

   36 condition: expression LT expression
   37          | expression GT expression
   38          | expression LE expression
   39          | expression GE expression
   40          | expression EQ expression
   41          | expression NE expression
   42          | LPAREN condition AND condition RPAREN
   43          | LPAREN condition OR condition RPAREN
   44          | NOT LPAREN condition RPAREN

   45 bloc_instruction: LBRACE instructions RBRACE

   46 instruction_if: IF LPAREN condition RPAREN THEN bloc_instruction
   47               | IF LPAREN condition RPAREN THEN bloc_instruction ELSE bloc_instruction

   48 boucle: DO bloc_instruction WHILE LPAREN condition RPAREN SEMICOLON
   49       | FOR IDF FROM expression TO expression STEP expression bloc_instruction
   50       | WHILE LPAREN condition RPAREN bloc_instruction

   51 io_instruction: INPUT LPAREN idf_use RPAREN SEMICOLON
   52               | OUTPUT LPAREN STRING_VAL RPAREN SEMICOLON
   53               | OUTPUT LPAREN STRING_VAL COMMA expression RPAREN SEMICOLON
   54               | OUTPUT LPAREN expression RPAREN SEMICOLON

   55 commentaire: COMMENTAIRE_LIGNE
   56            | COMMENTAIRE_BLOC


Terminals, with rules where they appear

$end (0) 0
error (256)
MAINPRGM (258) 1
VAR (259) 2
BEGINPG (260) 2
ENDPG (261) 2
LET (262) 6 7
DEFINE (263) 8
CONST (264) 8
INT_TYPE (265) 11
FLOAT_TYPE (266) 12
IF (267) 46 47
THEN (268) 46 47
ELSE (269) 47
DO (270) 48
WHILE (271) 48 50
FOR (272) 49
FROM (273) 49
TO (274) 49
STEP (275) 49
INPUT (276) 51
OUTPUT (277) 52 53 54
AND (278) 42
OR (279) 43
NOT (280) 44
PLUS (281) 27
MINUS (282) 28
MULT (283) 29
DIV (284) 30
LT (285) 36
GT (286) 37
LE (287) 38
GE (288) 39
EQ (289) 40
NE (290) 41
ASSIGN (291) 24 25
COLON (292) 6 7 8
SEMICOLON (293) 1 2 6 7 8 23 24 25 48 51 52 53 54
COMMA (294) 9 53
LBRACKET (295) 7 25 33
RBRACKET (296) 7 25 33
EQUALS (297) 8
LPAREN (298) 31 42 43 44 46 47 48 50 51 52 53 54
RPAREN (299) 31 42 43 44 46 47 48 50 51 52 53 54
LBRACE (300) 2 45
RBRACE (301) 2 45
IDF (302) 1 8 9 10 26 49
INT_VAL (303) 7 13 34
FLOAT_VAL (304) 14 35
STRING_VAL (305) 52 53
COMMENTAIRE_LIGNE (306) 55
COMMENTAIRE_BLOC (307) 56
LOWER_THAN_ELSE (308)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
programme (55)
    on left: 1, on right: 0
bloc (56)
    on left: 2, on right: 1
declarations (57)
    on left: 3 4 5, on right: 2 3 4
declaration (58)
    on left: 6 7 8, on right: 3
liste_idf (59)
    on left: 9 10, on right: 6 7 9
type (60)
    on left: 11 12, on right: 6 7 8
valeur (61)
    on left: 13 14, on right: 8
instructions (62)
    on left: 15 16, on right: 2 15 45
instruction (63)
    on left: 17 18 19 20 21 22 23, on right: 15
affectation (64)
    on left: 24 25, on right: 17
idf_use (65)
    on left: 26, on right: 24 25 32 33 51
expression (66)
    on left: 27 28 29 30 31 32 33 34 35, on right: 24 25 27 28 29 30
    31 33 36 37 38 39 40 41 49 53 54
condition (67)
    on left: 36 37 38 39 40 41 42 43 44, on right: 18 42 43 44 46 47
    48 50
bloc_instruction (68)
    on left: 45, on right: 46 47 48 49 50
instruction_if (69)
    on left: 46 47, on right: 22
boucle (70)
    on left: 48 49 50, on right: 19
io_instruction (71)
    on left: 51 52 53 54, on right: 20
commentaire (72)
    on left: 55 56, on right: 4 21


state 0

    0 $accept: . programme $end
    1 programme: . MAINPRGM IDF SEMICOLON bloc

    MAINPRGM  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MAINPRGM . IDF SEMICOLON bloc

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MAINPRGM IDF . SEMICOLON bloc

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MAINPRGM IDF SEMICOLON . bloc
    2 bloc: . VAR declarations BEGINPG LBRACE instructions RBRACE ENDPG SEMICOLON

    VAR  shift, and go to state 6

    bloc  go to state 7


state 6

    2 bloc: VAR . declarations BEGINPG LBRACE instructions RBRACE ENDPG SEMICOLON
    3 declarations: . declarations declaration
    4             | . declarations commentaire
    5             | .

    $default  reduce using rule 5 (declarations)

    declarations  go to state 8


state 7

    1 programme: MAINPRGM IDF SEMICOLON bloc .

    $default  reduce using rule 1 (programme)


state 8

    2 bloc: VAR declarations . BEGINPG LBRACE instructions RBRACE ENDPG SEMICOLON
    3 declarations: declarations . declaration
    4             | declarations . commentaire
    6 declaration: . LET liste_idf COLON type SEMICOLON
    7            | . LET liste_idf COLON LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON
    8            | . DEFINE CONST IDF COLON type EQUALS valeur SEMICOLON
   55 commentaire: . COMMENTAIRE_LIGNE
   56            | . COMMENTAIRE_BLOC

    BEGINPG            shift, and go to state 9
    LET                shift, and go to state 10
    DEFINE             shift, and go to state 11
    COMMENTAIRE_LIGNE  shift, and go to state 12
    COMMENTAIRE_BLOC   shift, and go to state 13

    declaration  go to state 14
    commentaire  go to state 15


state 9

    2 bloc: VAR declarations BEGINPG . LBRACE instructions RBRACE ENDPG SEMICOLON

    LBRACE  shift, and go to state 16


state 10

    6 declaration: LET . liste_idf COLON type SEMICOLON
    7            | LET . liste_idf COLON LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON
    9 liste_idf: . liste_idf COMMA IDF
   10          | . IDF

    IDF  shift, and go to state 17

    liste_idf  go to state 18


state 11

    8 declaration: DEFINE . CONST IDF COLON type EQUALS valeur SEMICOLON

    CONST  shift, and go to state 19


state 12

   55 commentaire: COMMENTAIRE_LIGNE .

    $default  reduce using rule 55 (commentaire)


state 13

   56 commentaire: COMMENTAIRE_BLOC .

    $default  reduce using rule 56 (commentaire)


state 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 15

    4 declarations: declarations commentaire .

    $default  reduce using rule 4 (declarations)


state 16

    2 bloc: VAR declarations BEGINPG LBRACE . instructions RBRACE ENDPG SEMICOLON
   15 instructions: . instructions instruction
   16             | .

    $default  reduce using rule 16 (instructions)

    instructions  go to state 20


state 17

   10 liste_idf: IDF .

    $default  reduce using rule 10 (liste_idf)


state 18

    6 declaration: LET liste_idf . COLON type SEMICOLON
    7            | LET liste_idf . COLON LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON
    9 liste_idf: liste_idf . COMMA IDF

    COLON  shift, and go to state 21
    COMMA  shift, and go to state 22


state 19

    8 declaration: DEFINE CONST . IDF COLON type EQUALS valeur SEMICOLON

    IDF  shift, and go to state 23


state 20

    2 bloc: VAR declarations BEGINPG LBRACE instructions . RBRACE ENDPG SEMICOLON
   15 instructions: instructions . instruction
   17 instruction: . affectation
   18            | . condition
   19            | . boucle
   20            | . io_instruction
   21            | . commentaire
   22            | . instruction_if
   23            | . SEMICOLON
   24 affectation: . idf_use ASSIGN expression SEMICOLON
   25            | . idf_use LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   46 instruction_if: . IF LPAREN condition RPAREN THEN bloc_instruction
   47               | . IF LPAREN condition RPAREN THEN bloc_instruction ELSE bloc_instruction
   48 boucle: . DO bloc_instruction WHILE LPAREN condition RPAREN SEMICOLON
   49       | . FOR IDF FROM expression TO expression STEP expression bloc_instruction
   50       | . WHILE LPAREN condition RPAREN bloc_instruction
   51 io_instruction: . INPUT LPAREN idf_use RPAREN SEMICOLON
   52               | . OUTPUT LPAREN STRING_VAL RPAREN SEMICOLON
   53               | . OUTPUT LPAREN STRING_VAL COMMA expression RPAREN SEMICOLON
   54               | . OUTPUT LPAREN expression RPAREN SEMICOLON
   55 commentaire: . COMMENTAIRE_LIGNE
   56            | . COMMENTAIRE_BLOC

    IF                 shift, and go to state 24
    DO                 shift, and go to state 25
    WHILE              shift, and go to state 26
    FOR                shift, and go to state 27
    INPUT              shift, and go to state 28
    OUTPUT             shift, and go to state 29
    NOT                shift, and go to state 30
    SEMICOLON          shift, and go to state 31
    LPAREN             shift, and go to state 32
    RBRACE             shift, and go to state 33
    IDF                shift, and go to state 34
    INT_VAL            shift, and go to state 35
    FLOAT_VAL          shift, and go to state 36
    COMMENTAIRE_LIGNE  shift, and go to state 12
    COMMENTAIRE_BLOC   shift, and go to state 13

    instruction     go to state 37
    affectation     go to state 38
    idf_use         go to state 39
    expression      go to state 40
    condition       go to state 41
    instruction_if  go to state 42
    boucle          go to state 43
    io_instruction  go to state 44
    commentaire     go to state 45


state 21

    6 declaration: LET liste_idf COLON . type SEMICOLON
    7            | LET liste_idf COLON . LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON
   11 type: . INT_TYPE
   12     | . FLOAT_TYPE

    INT_TYPE    shift, and go to state 46
    FLOAT_TYPE  shift, and go to state 47
    LBRACKET    shift, and go to state 48

    type  go to state 49


state 22

    9 liste_idf: liste_idf COMMA . IDF

    IDF  shift, and go to state 50


state 23

    8 declaration: DEFINE CONST IDF . COLON type EQUALS valeur SEMICOLON

    COLON  shift, and go to state 51


state 24

   46 instruction_if: IF . LPAREN condition RPAREN THEN bloc_instruction
   47               | IF . LPAREN condition RPAREN THEN bloc_instruction ELSE bloc_instruction

    LPAREN  shift, and go to state 52


state 25

   45 bloc_instruction: . LBRACE instructions RBRACE
   48 boucle: DO . bloc_instruction WHILE LPAREN condition RPAREN SEMICOLON

    LBRACE  shift, and go to state 53

    bloc_instruction  go to state 54


state 26

   50 boucle: WHILE . LPAREN condition RPAREN bloc_instruction

    LPAREN  shift, and go to state 55


state 27

   49 boucle: FOR . IDF FROM expression TO expression STEP expression bloc_instruction

    IDF  shift, and go to state 56


state 28

   51 io_instruction: INPUT . LPAREN idf_use RPAREN SEMICOLON

    LPAREN  shift, and go to state 57


state 29

   52 io_instruction: OUTPUT . LPAREN STRING_VAL RPAREN SEMICOLON
   53               | OUTPUT . LPAREN STRING_VAL COMMA expression RPAREN SEMICOLON
   54               | OUTPUT . LPAREN expression RPAREN SEMICOLON

    LPAREN  shift, and go to state 58


state 30

   44 condition: NOT . LPAREN condition RPAREN

    LPAREN  shift, and go to state 59


state 31

   23 instruction: SEMICOLON .

    $default  reduce using rule 23 (instruction)


state 32

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   31           | LPAREN . expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   42          | LPAREN . condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   43          | LPAREN . condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 61
    condition   go to state 62


state 33

    2 bloc: VAR declarations BEGINPG LBRACE instructions RBRACE . ENDPG SEMICOLON

    ENDPG  shift, and go to state 63


state 34

   26 idf_use: IDF .

    $default  reduce using rule 26 (idf_use)


state 35

   34 expression: INT_VAL .

    $default  reduce using rule 34 (expression)


state 36

   35 expression: FLOAT_VAL .

    $default  reduce using rule 35 (expression)


state 37

   15 instructions: instructions instruction .

    $default  reduce using rule 15 (instructions)


state 38

   17 instruction: affectation .

    $default  reduce using rule 17 (instruction)


state 39

   24 affectation: idf_use . ASSIGN expression SEMICOLON
   25            | idf_use . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
   32 expression: idf_use .  [PLUS, MINUS, MULT, DIV, LT, GT, LE, GE, EQ, NE]
   33           | idf_use . LBRACKET expression RBRACKET

    ASSIGN    shift, and go to state 64
    LBRACKET  shift, and go to state 65

    $default  reduce using rule 32 (expression)


state 40

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   36 condition: expression . LT expression
   37          | expression . GT expression
   38          | expression . LE expression
   39          | expression . GE expression
   40          | expression . EQ expression
   41          | expression . NE expression

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69
    LT     shift, and go to state 70
    GT     shift, and go to state 71
    LE     shift, and go to state 72
    GE     shift, and go to state 73
    EQ     shift, and go to state 74
    NE     shift, and go to state 75


state 41

   18 instruction: condition .

    $default  reduce using rule 18 (instruction)


state 42

   22 instruction: instruction_if .

    $default  reduce using rule 22 (instruction)


state 43

   19 instruction: boucle .

    $default  reduce using rule 19 (instruction)


state 44

   20 instruction: io_instruction .

    $default  reduce using rule 20 (instruction)


state 45

   21 instruction: commentaire .

    $default  reduce using rule 21 (instruction)


state 46

   11 type: INT_TYPE .

    $default  reduce using rule 11 (type)


state 47

   12 type: FLOAT_TYPE .

    $default  reduce using rule 12 (type)


state 48

    7 declaration: LET liste_idf COLON LBRACKET . type SEMICOLON INT_VAL RBRACKET SEMICOLON
   11 type: . INT_TYPE
   12     | . FLOAT_TYPE

    INT_TYPE    shift, and go to state 46
    FLOAT_TYPE  shift, and go to state 47

    type  go to state 76


state 49

    6 declaration: LET liste_idf COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 77


state 50

    9 liste_idf: liste_idf COMMA IDF .

    $default  reduce using rule 9 (liste_idf)


state 51

    8 declaration: DEFINE CONST IDF COLON . type EQUALS valeur SEMICOLON
   11 type: . INT_TYPE
   12     | . FLOAT_TYPE

    INT_TYPE    shift, and go to state 46
    FLOAT_TYPE  shift, and go to state 47

    type  go to state 78


state 52

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   46 instruction_if: IF LPAREN . condition RPAREN THEN bloc_instruction
   47               | IF LPAREN . condition RPAREN THEN bloc_instruction ELSE bloc_instruction

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 79


state 53

   15 instructions: . instructions instruction
   16             | .
   45 bloc_instruction: LBRACE . instructions RBRACE

    $default  reduce using rule 16 (instructions)

    instructions  go to state 80


state 54

   48 boucle: DO bloc_instruction . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE  shift, and go to state 81


state 55

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   50 boucle: WHILE LPAREN . condition RPAREN bloc_instruction

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 82


state 56

   49 boucle: FOR IDF . FROM expression TO expression STEP expression bloc_instruction

    FROM  shift, and go to state 83


state 57

   26 idf_use: . IDF
   51 io_instruction: INPUT LPAREN . idf_use RPAREN SEMICOLON

    IDF  shift, and go to state 34

    idf_use  go to state 84


state 58

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   52 io_instruction: OUTPUT LPAREN . STRING_VAL RPAREN SEMICOLON
   53               | OUTPUT LPAREN . STRING_VAL COMMA expression RPAREN SEMICOLON
   54               | OUTPUT LPAREN . expression RPAREN SEMICOLON

    LPAREN      shift, and go to state 85
    IDF         shift, and go to state 34
    INT_VAL     shift, and go to state 35
    FLOAT_VAL   shift, and go to state 36
    STRING_VAL  shift, and go to state 86

    idf_use     go to state 60
    expression  go to state 87


state 59

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   44          | NOT LPAREN . condition RPAREN

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 88


state 60

   32 expression: idf_use .  [IF, DO, WHILE, FOR, TO, STEP, INPUT, OUTPUT, AND, OR, NOT, PLUS, MINUS, MULT, DIV, LT, GT, LE, GE, EQ, NE, SEMICOLON, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]
   33           | idf_use . LBRACKET expression RBRACKET

    LBRACKET  shift, and go to state 89

    $default  reduce using rule 32 (expression)


state 61

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   31           | LPAREN expression . RPAREN
   36 condition: expression . LT expression
   37          | expression . GT expression
   38          | expression . LE expression
   39          | expression . GE expression
   40          | expression . EQ expression
   41          | expression . NE expression

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    MULT    shift, and go to state 68
    DIV     shift, and go to state 69
    LT      shift, and go to state 70
    GT      shift, and go to state 71
    LE      shift, and go to state 72
    GE      shift, and go to state 73
    EQ      shift, and go to state 74
    NE      shift, and go to state 75
    RPAREN  shift, and go to state 90


state 62

   42 condition: LPAREN condition . AND condition RPAREN
   43          | LPAREN condition . OR condition RPAREN

    AND  shift, and go to state 91
    OR   shift, and go to state 92


state 63

    2 bloc: VAR declarations BEGINPG LBRACE instructions RBRACE ENDPG . SEMICOLON

    SEMICOLON  shift, and go to state 93


state 64

   24 affectation: idf_use ASSIGN . expression SEMICOLON
   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 94


state 65

   25 affectation: idf_use LBRACKET . expression RBRACKET ASSIGN expression SEMICOLON
   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   33           | idf_use LBRACKET . expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 95


state 66

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   27           | expression PLUS . expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 96


state 67

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   28           | expression MINUS . expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 97


state 68

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   29           | expression MULT . expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 98


state 69

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   30           | expression DIV . expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 99


state 70

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: expression LT . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 100


state 71

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   37 condition: expression GT . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 101


state 72

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   38 condition: expression LE . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 102


state 73

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   39 condition: expression GE . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 103


state 74

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   40 condition: expression EQ . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 104


state 75

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   41 condition: expression NE . expression

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 105


state 76

    7 declaration: LET liste_idf COLON LBRACKET type . SEMICOLON INT_VAL RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 106


state 77

    6 declaration: LET liste_idf COLON type SEMICOLON .

    $default  reduce using rule 6 (declaration)


state 78

    8 declaration: DEFINE CONST IDF COLON type . EQUALS valeur SEMICOLON

    EQUALS  shift, and go to state 107


state 79

   46 instruction_if: IF LPAREN condition . RPAREN THEN bloc_instruction
   47               | IF LPAREN condition . RPAREN THEN bloc_instruction ELSE bloc_instruction

    RPAREN  shift, and go to state 108


state 80

   15 instructions: instructions . instruction
   17 instruction: . affectation
   18            | . condition
   19            | . boucle
   20            | . io_instruction
   21            | . commentaire
   22            | . instruction_if
   23            | . SEMICOLON
   24 affectation: . idf_use ASSIGN expression SEMICOLON
   25            | . idf_use LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   45 bloc_instruction: LBRACE instructions . RBRACE
   46 instruction_if: . IF LPAREN condition RPAREN THEN bloc_instruction
   47               | . IF LPAREN condition RPAREN THEN bloc_instruction ELSE bloc_instruction
   48 boucle: . DO bloc_instruction WHILE LPAREN condition RPAREN SEMICOLON
   49       | . FOR IDF FROM expression TO expression STEP expression bloc_instruction
   50       | . WHILE LPAREN condition RPAREN bloc_instruction
   51 io_instruction: . INPUT LPAREN idf_use RPAREN SEMICOLON
   52               | . OUTPUT LPAREN STRING_VAL RPAREN SEMICOLON
   53               | . OUTPUT LPAREN STRING_VAL COMMA expression RPAREN SEMICOLON
   54               | . OUTPUT LPAREN expression RPAREN SEMICOLON
   55 commentaire: . COMMENTAIRE_LIGNE
   56            | . COMMENTAIRE_BLOC

    IF                 shift, and go to state 24
    DO                 shift, and go to state 25
    WHILE              shift, and go to state 26
    FOR                shift, and go to state 27
    INPUT              shift, and go to state 28
    OUTPUT             shift, and go to state 29
    NOT                shift, and go to state 30
    SEMICOLON          shift, and go to state 31
    LPAREN             shift, and go to state 32
    RBRACE             shift, and go to state 109
    IDF                shift, and go to state 34
    INT_VAL            shift, and go to state 35
    FLOAT_VAL          shift, and go to state 36
    COMMENTAIRE_LIGNE  shift, and go to state 12
    COMMENTAIRE_BLOC   shift, and go to state 13

    instruction     go to state 37
    affectation     go to state 38
    idf_use         go to state 39
    expression      go to state 40
    condition       go to state 41
    instruction_if  go to state 42
    boucle          go to state 43
    io_instruction  go to state 44
    commentaire     go to state 45


state 81

   48 boucle: DO bloc_instruction WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN  shift, and go to state 110


state 82

   50 boucle: WHILE LPAREN condition . RPAREN bloc_instruction

    RPAREN  shift, and go to state 111


state 83

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   49 boucle: FOR IDF FROM . expression TO expression STEP expression bloc_instruction

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 112


state 84

   51 io_instruction: INPUT LPAREN idf_use . RPAREN SEMICOLON

    RPAREN  shift, and go to state 113


state 85

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   31           | LPAREN . expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 114


state 86

   52 io_instruction: OUTPUT LPAREN STRING_VAL . RPAREN SEMICOLON
   53               | OUTPUT LPAREN STRING_VAL . COMMA expression RPAREN SEMICOLON

    COMMA   shift, and go to state 115
    RPAREN  shift, and go to state 116


state 87

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   54 io_instruction: OUTPUT LPAREN expression . RPAREN SEMICOLON

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    MULT    shift, and go to state 68
    DIV     shift, and go to state 69
    RPAREN  shift, and go to state 117


state 88

   44 condition: NOT LPAREN condition . RPAREN

    RPAREN  shift, and go to state 118


state 89

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   33           | idf_use LBRACKET . expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 119


state 90

   31 expression: LPAREN expression RPAREN .

    $default  reduce using rule 31 (expression)


state 91

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   42          | LPAREN condition AND . condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 120


state 92

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   43          | LPAREN condition OR . condition RPAREN
   44          | . NOT LPAREN condition RPAREN

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 121


state 93

    2 bloc: VAR declarations BEGINPG LBRACE instructions RBRACE ENDPG SEMICOLON .

    $default  reduce using rule 2 (bloc)


state 94

   24 affectation: idf_use ASSIGN expression . SEMICOLON
   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression

    PLUS       shift, and go to state 66
    MINUS      shift, and go to state 67
    MULT       shift, and go to state 68
    DIV        shift, and go to state 69
    SEMICOLON  shift, and go to state 122


state 95

   25 affectation: idf_use LBRACKET expression . RBRACKET ASSIGN expression SEMICOLON
   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   33           | idf_use LBRACKET expression . RBRACKET

    PLUS      shift, and go to state 66
    MINUS     shift, and go to state 67
    MULT      shift, and go to state 68
    DIV       shift, and go to state 69
    RBRACKET  shift, and go to state 123


state 96

   27 expression: expression . PLUS expression
   27           | expression PLUS expression .  [IF, DO, WHILE, FOR, TO, STEP, INPUT, OUTPUT, AND, OR, NOT, PLUS, MINUS, LT, GT, LE, GE, EQ, NE, SEMICOLON, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression

    MULT  shift, and go to state 68
    DIV   shift, and go to state 69

    $default  reduce using rule 27 (expression)

    Conflict between rule 27 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 27 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 27 and token MULT resolved as shift (PLUS < MULT).
    Conflict between rule 27 and token DIV resolved as shift (PLUS < DIV).


state 97

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   28           | expression MINUS expression .  [IF, DO, WHILE, FOR, TO, STEP, INPUT, OUTPUT, AND, OR, NOT, PLUS, MINUS, LT, GT, LE, GE, EQ, NE, SEMICOLON, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]
   29           | expression . MULT expression
   30           | expression . DIV expression

    MULT  shift, and go to state 68
    DIV   shift, and go to state 69

    $default  reduce using rule 28 (expression)

    Conflict between rule 28 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 28 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 28 and token MULT resolved as shift (MINUS < MULT).
    Conflict between rule 28 and token DIV resolved as shift (MINUS < DIV).


state 98

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   29           | expression MULT expression .  [IF, DO, WHILE, FOR, TO, STEP, INPUT, OUTPUT, AND, OR, NOT, PLUS, MINUS, MULT, DIV, LT, GT, LE, GE, EQ, NE, SEMICOLON, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]
   30           | expression . DIV expression

    $default  reduce using rule 29 (expression)

    Conflict between rule 29 and token PLUS resolved as reduce (PLUS < MULT).
    Conflict between rule 29 and token MINUS resolved as reduce (MINUS < MULT).
    Conflict between rule 29 and token MULT resolved as reduce (%left MULT).
    Conflict between rule 29 and token DIV resolved as reduce (%left DIV).


state 99

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   30           | expression DIV expression .  [IF, DO, WHILE, FOR, TO, STEP, INPUT, OUTPUT, AND, OR, NOT, PLUS, MINUS, MULT, DIV, LT, GT, LE, GE, EQ, NE, SEMICOLON, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    $default  reduce using rule 30 (expression)

    Conflict between rule 30 and token PLUS resolved as reduce (PLUS < DIV).
    Conflict between rule 30 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 30 and token MULT resolved as reduce (%left MULT).
    Conflict between rule 30 and token DIV resolved as reduce (%left DIV).


state 100

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   36 condition: expression LT expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 36 (condition)


state 101

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   37 condition: expression GT expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 37 (condition)


state 102

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   38 condition: expression LE expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 38 (condition)


state 103

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   39 condition: expression GE expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 39 (condition)


state 104

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   40 condition: expression EQ expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 40 (condition)


state 105

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   41 condition: expression NE expression .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, AND, OR, NOT, SEMICOLON, LPAREN, RPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 41 (condition)


state 106

    7 declaration: LET liste_idf COLON LBRACKET type SEMICOLON . INT_VAL RBRACKET SEMICOLON

    INT_VAL  shift, and go to state 124


state 107

    8 declaration: DEFINE CONST IDF COLON type EQUALS . valeur SEMICOLON
   13 valeur: . INT_VAL
   14       | . FLOAT_VAL

    INT_VAL    shift, and go to state 125
    FLOAT_VAL  shift, and go to state 126

    valeur  go to state 127


state 108

   46 instruction_if: IF LPAREN condition RPAREN . THEN bloc_instruction
   47               | IF LPAREN condition RPAREN . THEN bloc_instruction ELSE bloc_instruction

    THEN  shift, and go to state 128


state 109

   45 bloc_instruction: LBRACE instructions RBRACE .

    $default  reduce using rule 45 (bloc_instruction)


state 110

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   36 condition: . expression LT expression
   37          | . expression GT expression
   38          | . expression LE expression
   39          | . expression GE expression
   40          | . expression EQ expression
   41          | . expression NE expression
   42          | . LPAREN condition AND condition RPAREN
   43          | . LPAREN condition OR condition RPAREN
   44          | . NOT LPAREN condition RPAREN
   48 boucle: DO bloc_instruction WHILE LPAREN . condition RPAREN SEMICOLON

    NOT        shift, and go to state 30
    LPAREN     shift, and go to state 32
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 40
    condition   go to state 129


state 111

   45 bloc_instruction: . LBRACE instructions RBRACE
   50 boucle: WHILE LPAREN condition RPAREN . bloc_instruction

    LBRACE  shift, and go to state 53

    bloc_instruction  go to state 130


state 112

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   49 boucle: FOR IDF FROM expression . TO expression STEP expression bloc_instruction

    TO     shift, and go to state 131
    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69


state 113

   51 io_instruction: INPUT LPAREN idf_use RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 132


state 114

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   31           | LPAREN expression . RPAREN

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    MULT    shift, and go to state 68
    DIV     shift, and go to state 69
    RPAREN  shift, and go to state 90


state 115

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   53 io_instruction: OUTPUT LPAREN STRING_VAL COMMA . expression RPAREN SEMICOLON

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 133


state 116

   52 io_instruction: OUTPUT LPAREN STRING_VAL RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 134


state 117

   54 io_instruction: OUTPUT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 135


state 118

   44 condition: NOT LPAREN condition RPAREN .

    $default  reduce using rule 44 (condition)


state 119

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   33           | idf_use LBRACKET expression . RBRACKET

    PLUS      shift, and go to state 66
    MINUS     shift, and go to state 67
    MULT      shift, and go to state 68
    DIV       shift, and go to state 69
    RBRACKET  shift, and go to state 136


state 120

   42 condition: LPAREN condition AND condition . RPAREN

    RPAREN  shift, and go to state 137


state 121

   43 condition: LPAREN condition OR condition . RPAREN

    RPAREN  shift, and go to state 138


state 122

   24 affectation: idf_use ASSIGN expression SEMICOLON .

    $default  reduce using rule 24 (affectation)


state 123

   25 affectation: idf_use LBRACKET expression RBRACKET . ASSIGN expression SEMICOLON
   33 expression: idf_use LBRACKET expression RBRACKET .  [PLUS, MINUS, MULT, DIV, LT, GT, LE, GE, EQ, NE]

    ASSIGN  shift, and go to state 139

    $default  reduce using rule 33 (expression)


state 124

    7 declaration: LET liste_idf COLON LBRACKET type SEMICOLON INT_VAL . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 140


state 125

   13 valeur: INT_VAL .

    $default  reduce using rule 13 (valeur)


state 126

   14 valeur: FLOAT_VAL .

    $default  reduce using rule 14 (valeur)


state 127

    8 declaration: DEFINE CONST IDF COLON type EQUALS valeur . SEMICOLON

    SEMICOLON  shift, and go to state 141


state 128

   45 bloc_instruction: . LBRACE instructions RBRACE
   46 instruction_if: IF LPAREN condition RPAREN THEN . bloc_instruction
   47               | IF LPAREN condition RPAREN THEN . bloc_instruction ELSE bloc_instruction

    LBRACE  shift, and go to state 53

    bloc_instruction  go to state 142


state 129

   48 boucle: DO bloc_instruction WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN  shift, and go to state 143


state 130

   50 boucle: WHILE LPAREN condition RPAREN bloc_instruction .

    $default  reduce using rule 50 (boucle)


state 131

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   49 boucle: FOR IDF FROM expression TO . expression STEP expression bloc_instruction

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 144


state 132

   51 io_instruction: INPUT LPAREN idf_use RPAREN SEMICOLON .

    $default  reduce using rule 51 (io_instruction)


state 133

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   53 io_instruction: OUTPUT LPAREN STRING_VAL COMMA expression . RPAREN SEMICOLON

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    MULT    shift, and go to state 68
    DIV     shift, and go to state 69
    RPAREN  shift, and go to state 145


state 134

   52 io_instruction: OUTPUT LPAREN STRING_VAL RPAREN SEMICOLON .

    $default  reduce using rule 52 (io_instruction)


state 135

   54 io_instruction: OUTPUT LPAREN expression RPAREN SEMICOLON .

    $default  reduce using rule 54 (io_instruction)


state 136

   33 expression: idf_use LBRACKET expression RBRACKET .

    $default  reduce using rule 33 (expression)


state 137

   42 condition: LPAREN condition AND condition RPAREN .

    $default  reduce using rule 42 (condition)


state 138

   43 condition: LPAREN condition OR condition RPAREN .

    $default  reduce using rule 43 (condition)


state 139

   25 affectation: idf_use LBRACKET expression RBRACKET ASSIGN . expression SEMICOLON
   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 146


state 140

    7 declaration: LET liste_idf COLON LBRACKET type SEMICOLON INT_VAL RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 147


state 141

    8 declaration: DEFINE CONST IDF COLON type EQUALS valeur SEMICOLON .

    $default  reduce using rule 8 (declaration)


state 142

   46 instruction_if: IF LPAREN condition RPAREN THEN bloc_instruction .  [IF, DO, WHILE, FOR, INPUT, OUTPUT, NOT, SEMICOLON, LPAREN, RBRACE, IDF, INT_VAL, FLOAT_VAL, COMMENTAIRE_LIGNE, COMMENTAIRE_BLOC]
   47               | IF LPAREN condition RPAREN THEN bloc_instruction . ELSE bloc_instruction

    ELSE  shift, and go to state 148

    $default  reduce using rule 46 (instruction_if)


state 143

   48 boucle: DO bloc_instruction WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 149


state 144

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   49 boucle: FOR IDF FROM expression TO expression . STEP expression bloc_instruction

    STEP   shift, and go to state 150
    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67
    MULT   shift, and go to state 68
    DIV    shift, and go to state 69


state 145

   53 io_instruction: OUTPUT LPAREN STRING_VAL COMMA expression RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 151


state 146

   25 affectation: idf_use LBRACKET expression RBRACKET ASSIGN expression . SEMICOLON
   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression

    PLUS       shift, and go to state 66
    MINUS      shift, and go to state 67
    MULT       shift, and go to state 68
    DIV        shift, and go to state 69
    SEMICOLON  shift, and go to state 152


state 147

    7 declaration: LET liste_idf COLON LBRACKET type SEMICOLON INT_VAL RBRACKET SEMICOLON .

    $default  reduce using rule 7 (declaration)


state 148

   45 bloc_instruction: . LBRACE instructions RBRACE
   47 instruction_if: IF LPAREN condition RPAREN THEN bloc_instruction ELSE . bloc_instruction

    LBRACE  shift, and go to state 53

    bloc_instruction  go to state 153


state 149

   48 boucle: DO bloc_instruction WHILE LPAREN condition RPAREN SEMICOLON .

    $default  reduce using rule 48 (boucle)


state 150

   26 idf_use: . IDF
   27 expression: . expression PLUS expression
   28           | . expression MINUS expression
   29           | . expression MULT expression
   30           | . expression DIV expression
   31           | . LPAREN expression RPAREN
   32           | . idf_use
   33           | . idf_use LBRACKET expression RBRACKET
   34           | . INT_VAL
   35           | . FLOAT_VAL
   49 boucle: FOR IDF FROM expression TO expression STEP . expression bloc_instruction

    LPAREN     shift, and go to state 85
    IDF        shift, and go to state 34
    INT_VAL    shift, and go to state 35
    FLOAT_VAL  shift, and go to state 36

    idf_use     go to state 60
    expression  go to state 154


state 151

   53 io_instruction: OUTPUT LPAREN STRING_VAL COMMA expression RPAREN SEMICOLON .

    $default  reduce using rule 53 (io_instruction)


state 152

   25 affectation: idf_use LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .

    $default  reduce using rule 25 (affectation)


state 153

   47 instruction_if: IF LPAREN condition RPAREN THEN bloc_instruction ELSE bloc_instruction .

    $default  reduce using rule 47 (instruction_if)


state 154

   27 expression: expression . PLUS expression
   28           | expression . MINUS expression
   29           | expression . MULT expression
   30           | expression . DIV expression
   45 bloc_instruction: . LBRACE instructions RBRACE
   49 boucle: FOR IDF FROM expression TO expression STEP expression . bloc_instruction

    PLUS    shift, and go to state 66
    MINUS   shift, and go to state 67
    MULT    shift, and go to state 68
    DIV     shift, and go to state 69
    LBRACE  shift, and go to state 53

    bloc_instruction  go to state 155


state 155

   49 boucle: FOR IDF FROM expression TO expression STEP expression bloc_instruction .

    $default  reduce using rule 49 (boucle)
